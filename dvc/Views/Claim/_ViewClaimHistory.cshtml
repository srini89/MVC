@using VanWagenen.Dvc.Domain.Models
@using VanWagenen.Dvc.Web.Helpers

@model VanWagenen.Dvc.Web.ViewModels.ClaimHistoryViewModel

@if (Model.ClaimWorkflowHistory != null && Model.ClaimWorkflowHistory.Count() > 0)
{
    int inx = 1;
    int histCnt = Model.ClaimWorkflowHistory.Count;

    <div id="historyFilter">
        <div class="history-filter padding-md">@Html.CheckBoxFor(model => model.DisplayNotes) @Html.LabelFor(model => model.DisplayNotes,"Notes")</div>
        <div class="history-filter padding-md">@Html.CheckBoxFor(model => model.DisplayDocuments) @Html.LabelFor(model => model.DisplayDocuments,"Documents")</div>
        <div class="history-filter padding-md">@Html.CheckBoxFor(model => model.DisplayStateChange) @Html.LabelFor(model => model.DisplayStateChange,"State Changes")</div>
        <div class="history-filter padding-md">@Html.CheckBoxFor(model => model.DisplayClaimReviews) @Html.LabelFor(model => model.DisplayClaimReviews, "Claim Reviews")</div>
        <div class="clear-both"></div>
    </div>
    <div>
        @foreach (ClaimHistory history in Model.ClaimWorkflowHistory)
        {
            var title = "";
            if (Model.DisplayStateChange && history.HistoryType == HistoryType.StateChange)
            {
                var stateDesc = (history.HistoryObject as VanWagenen.Dvc.Repository.Models.ClaimWorkflowStateHistory).NewState.GetDisplayName();
                <div class="state-history-item-container">
                    <div class="history-item state-history-item padding-sm">
                        <label class="history-label">@history.HistoryType.GetDisplayName()</label>:<span class="history-state-desc">@stateDesc</span><br />
                        <label class="history-label"><span>@history.DateEntered.ToLocalTime().ToShortDateString()</span> <span class="add-space">@history.DateEntered.ToLocalTime().ToShortTimeString()</span></label><br />
                        <label class="history-label">Trigger: </label><span>@history.Trigger</span><br />
                        <label class="history-label">Reason: </label><span>@history.Reason</span><br />
                        @*<label class="padding-none margin-bottom-none">User: </label><span>@history.User</span>*@
                    </div>
                    @if (inx != histCnt)
                    {
                        <div class="history-arrow"><div class="glyphicon glyphicon-arrow-right history-arrow-span"></div></div>
                    }
                </div>
            }
            if (Model.DisplayDocuments && history.HistoryType == HistoryType.Document)
            {
                <div class="doc-history-item-container">
                    <div class="history-item doc-history-item padding-sm">
                        <label class="history-label">@history.Title</label><br />
                        <label class="history-label"><span>@history.DateEntered.ToLocalTime().ToShortDateString()</span> <span class="add-space">@history.DateEntered.ToLocalTime().ToShortTimeString()</span></label><br />
                        <label class="history-label">Type: </label><span>@history.DocumentDescription</span><br />
                        <label class="history-label">User: </label><span>@history.User</span>
                    </div>
                    @if (inx != histCnt)
                    {
                        <div class="history-arrow"><div class="glyphicon glyphicon-arrow-right history-arrow-span"></div></div>
                    }
                </div>
            }
            if (Model.DisplayNotes && history.HistoryType == HistoryType.Note)
            {
                title = (history.HistoryObject as VanWagenen.Dvc.Repository.Models.Note).Content;
                <div class="note-history-item-container">
                    <div class="history-item note-history-item padding-sm" data-toggle="tooltip" title="@title">
                        <label class="history-label">@history.HistoryType.GetDisplayName()</label><br />
                        <label class="history-label"><span>@history.DateEntered.ToLocalTime().ToShortDateString()</span> <span class="add-space">@history.DateEntered.ToLocalTime().ToShortTimeString()</span></label><br />
                        <label class="history-label">User: </label><span>@history.User</span>
                    </div>
                    @if (inx != histCnt) {
                        <div class="history-arrow"><div class="glyphicon glyphicon-arrow-right history-arrow-span"></div></div>
                    }
                </div>
            }

            if (Model.DisplayClaimReviews && history.HistoryType == HistoryType.ClaimReview)
            {
                <div class="review-history-item-container">
                    <div class="history-item review-history-item padding-sm">
                        <label class="history-label">@history.HistoryType.GetDisplayName()</label><br />
                        <label class="history-label"><span>@history.DateEntered.ToLocalTime().ToShortDateString()</span> <span class="add-space">@history.DateEntered.ToLocalTime().ToShortTimeString()</span></label><br />
                        <label class="history-label">User: </label><span>@history.User</span><br />
                        <label class="history-label">Escalation Threshold: </label><span>@history.Reason</span><br />
                    </div>
                    @if (inx != histCnt)
                    {
                        <div class="history-arrow"><div class="glyphicon glyphicon-arrow-right history-arrow-span"></div></div>
                    }
                </div>
            }

            inx++;
        }

    </div>
}