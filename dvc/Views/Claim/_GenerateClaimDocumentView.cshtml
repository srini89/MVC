@model VanWagenen.Dvc.Web.ViewModels.GenerateClaimDocumentViewModel

<script src="~/Scripts/app/LetterValidation.js"></script>

<div id="target">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
        <h4 class="modal-title">Generate Documents for Claim @Model.ClaimId</h4>
    </div>
    @using (Ajax.BeginForm("GenerateClaimDocumentView", "Claim",
        new AjaxOptions
        {
            HttpMethod = "POST",
            InsertionMode = InsertionMode.ReplaceWith,
            OnBegin = "return validateLetter(" + @Html.Raw(Json.Encode(Model)) + ")",
            OnSuccess = "location.reload()",
            OnFailure = "generateClaimSubmitError("+ ViewBag.Exception + ")",
            UpdateTargetId = "target"
        }))
    {
        @Html.HiddenFor(model => model.ClaimId)
        <div id="GenerateLetter" class="modal-body">
            @if (!string.IsNullOrEmpty(ViewBag.Exception))
            {
                <div>
                    @ViewBag.Exception
                </div>
            }
            <div class="row form-group form-group-sm">
                <div class="col-xs-12">
                    <fieldset class="fs-group">
                        <legend class="fs-group">Select Document Types</legend>
                            @for (var i = 0; i < Model.LetterTypes.Count; i++)
                            {
                                <div class="row">
                                    <div class="col-xs-6">
                                        @Html.HiddenFor(m => m.LetterTypes[i].Id)
                                        @Html.CheckBoxFor(m => m.LetterTypes[i].Selected, new { id = "Id_" + Model.LetterTypes[i].Description.Replace(" ", string.Empty) })
                                        @Html.DisplayFor(m => m.LetterTypes[i].Description)
                                    </div>
                                </div>
                            }
                    </fieldset>
                </div>
            </div>
            <!-- Custom Letters -->
            @if (Model.ClientLetters?.Count > 0)
            {
                <div class="row form-group form-group-sm">
                    <div class="col-xs-12">
                        <fieldset class="fs-group">
                            <legend class="fs-group">Select Custom Client Letters</legend>
                            @for (var i = 0; i < Model.ClientLetters.Count; i++)
                            {
                                <div class="row">
                                    <div class="col-xs-6">
                                        @Html.HiddenFor(m => m.ClientLetters[i].Id)
                                        @Html.HiddenFor(m => m.ClientLetters[i].FileName)
                                        @Html.HiddenFor(m => m.ClientLetters[i].LetterDescription)
                                        @Html.CheckBoxFor(m => m.ClientLetters[i].Selected)
                                        @Html.DisplayFor(m => m.ClientLetters[i].LetterDescription)
                                    </div>
                                </div>
                            }
                        </fieldset>
                    </div>
                </div>
            }
            <!-- End Custom Letters -->
            <div class="row form-group form-group-sm">
                <div class="col-xs-8">
                        @Html.LabelFor(model => model.Contact, "Contact")
                        @Html.DropDownListFor(model => model.ContactId, Model.ClaimContacts, new { @class = "form-control" })
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button id="generate-letter-button" type="submit" class="btn btn-success">Generate</button>
            <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        </div>
    }
</div>