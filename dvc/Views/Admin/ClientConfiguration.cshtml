@using iTextSharp.text.html.simpleparser
@using Microsoft.Ajax.Utilities
@using VanWagenen.Dvc.Web.Helpers
@using VanWagenen.Dvc.Web.ViewModels
@model VanWagenen.Dvc.Web.ViewModels.ClientConfigurationViewModel
@section Scripts{
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
    <script src="~/Scripts/app/ClientConfiguration.js" type="text/javascript"></script>
}
<div class="page-header">
    <h3>Client  Configuration</h3>
</div>
@Html.Partial("_BaseMessages")
<div class="admin-list-container">
    @using (Html.BeginForm("ClientSearch", "Admin", FormMethod.Post, new { @id = "Client-Search-Form" }))
    {
        <div class="row">
            <div class="col-sm-12">
                <h4>Client Search</h4>
            </div>
        </div>
        <div class="row>">
            <div class="col-sm-2">
                @Html.DropDownListFor(model => model.ClientId, Model.ClientList, null, new { @class = "selectpicker form-control", data_live_search = "true", title = "Please select a client", id = "client-dropdown", data_width = "80%" })
            </div>
        </div>
        <div class="row>">
            <div class="col-sm-1">
                <button type="button" data-toggle="modal" data-target="#addClientModal" class="btn btn-default">Create New Client</button>
            </div>
        </div>

        <!-- Modal for adding new client -->
        <div id="addClientModal" class="modal fade" role="dialog">
            <div class="modal-dialog modal-sm">
                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Add Client</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-xs-12">
                                <span id="add-client-error" class="error-sm"></span>
                            </div>
                        </div>
                        <div class="row form-group form-group-sm">
                            <div class="col-xs-12">
                                @Html.Label("Client Name")
                                @Html.TextBox("NewClientName", "", new { @class = "form-control new-client-name" })
                            </div>
                        </div>
                        <div class="row form-group form-group-sm">
                            <div class="col-xs-5">
                                @Html.Label("Client Code")
                                @Html.TextBox("NewClientCode", "", new { maxlength = "3", @class = "form-control new-client-code" })
                            </div>
                        </div>
                        <div class="row form-group form-group-sm">
                            <div class="col-xs-12">
                                @Html.Label("Client Number")
                                @Html.TextBox("NewClientNumber", "", new { @class = "form-control new-client-number" })
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="AddClient btn btn-success" name="AddClient" id="AddClient">Add Client</button>
                        <button type="button" class="btn btn-default" name="AddClientCancel" id="AddClientCancel" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
    <br />
    <hr />
    @if (Model.ClientId != -1)
    {
        using (Html.BeginForm("SubmitClientConfiguration", "Admin", FormMethod.Post, new { enctype = "multipart/form-data", id = "UpdateClientForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Client.Id, new { @class = "client-id" })
            <div class="form-horizontal">
                <div class="row">
                    <div class="col-sm-12">
                        <h4>Client Information</h4>
                    </div>
                </div>
                <div class="form-group form-group-sm row">
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.LegalName)
                        @Html.EditorFor(model => model.Client.LegalName, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.Name)
                        @Html.EditorFor(model => model.Client.Name, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                    </div>
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.ClientCode)
                        @if (Model.Client == null || Model.Client.ClientCode.IsNullOrWhiteSpace())
                        {
                            @Html.EditorFor(model => model.Client.ClientCode, new { htmlAttributes = new { @class = "form-control", maxlength = "3" } })
                        }
                        else
                        {
                            @Html.EditorFor(model => model.Client.ClientCode, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", maxlength = "3" } })
                        }
                    </div>
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.ClientNumber)
                        @Html.EditorFor(model => model.Client.ClientNumber, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                    </div>
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.LogoFileLocation)<br />
                        <label for="ClientLogoUpload">
                            <input id="ClientLogoUpload" name="ClientLogoUpload" type="file" accept=".jpg,.jpeg,.gif,.png,.bmp,.tiff">
                        </label>
                    </div>
                </div>
                <div class="form-group form-group-sm row">
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.PaymentAddress)
                        @Html.EditorFor(model => model.Client.PaymentAddress, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.PaymentCity)
                        @Html.EditorFor(model => model.Client.PaymentCity, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.PaymentState)<br />
                        @Html.DropDownListFor(model => model.Client.PaymentState, SelectListItemHelper.GetStateList(), new { @class = "selectpicker form-control", data_live_search = "true", data_width = "80%" })
                    </div>
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.PaymentZip)
                        @Html.EditorFor(model => model.Client.PaymentZip, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="col-xs-2">
                        @Html.Label("Logo Preview")<br />
                        <span id="client-logo-file-path">
                            @if (Model.Client != null && !Model.Client.LogoFileLocation.IsNullOrWhiteSpace())
                            {
                                <img class="client-logo" src="~/Images/Logos/@Path.GetFileName(Model.Client.LogoFileLocation)" alt="Client Logo" />
                            }
                        </span>
                    </div>
                </div>
                <div class="form-group form-group-sm row">
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.DvcEmailAddress)
                        @Html.EditorFor(model => model.Client.DvcEmailAddress, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.DvcPhoneNumber)
                        @Html.EditorFor(model => model.Client.DvcPhoneNumber, new { htmlAttributes = new { @class = "form-control phoneNumberMask" } })
                    </div>
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.DvcFaxNumber)
                        @Html.EditorFor(model => model.Client.DvcFaxNumber, new { htmlAttributes = new { @class = "form-control phoneNumberMask" } })
                    </div>
                    <div class="col-xs-2">
                        @Html.LabelFor(model => model.Client.ClientActive)
                        @Html.EditorFor(model => model.Client.ClientActive, new { htmlAttributes = new { @class = "checkbox" } })
                    </div>
                </div>
                <hr />
                <div class="row main-col" style="padding: 15px;">
                    <ul class="nav nav-tabs">
                        <li class="active"><a data-toggle="tab" href="#brands-tab">Brands</a></li>
                        <li><a data-toggle="tab" href="#letters-tab">Letters</a></li>
                        <li><a data-toggle="tab" href="#invoicing-tab">Invoicing</a></li>
                        <li><a data-toggle="tab" href="#preprocessing-tab">Pre-Preprocessing</a></li>
                        <li><a data-toggle="tab" href="#turnAroundTime-tab">Turnaround Time</a></li>
                        <li><a data-toggle="tab" href="#misc-tab">Misc</a></li>
                    </ul>
                    <div class="tab-content" style="border-left: 1px solid #dedede; border-right: 1px solid #dedede; border-bottom: 1px solid #dedede;">
                        <!-- Brands tab-->
                        <div id="brands-tab" class="tab-pane fade in active">
                            <div id="brand" class="panel-body ">
                                <button type="button" class="btn btn-primary" id="Add-Client-Brand">Add Brand</button>
                                <br />
                                <br />
                                <div class="form-group form-group-sm row">
                                    <div class="col-xs-2">
                                        @Html.Label("Brand Code")
                                    </div>
                                    <div class="col-xs-2">
                                        @Html.Label("Brand Legal Name")
                                    </div>
                                    <div class="col-xs-2">
                                        @Html.Label("Brand Logo")
                                    </div>
                                    <div class="col-xs-2">
                                        @Html.Label("Logo Preview")
                                    </div>
                                </div>
                                <div id="Client-Brands" class="form-group form-group-sm row">
                                    <div class="Brands-Row">
                                        @if (Model.ClientBrands?.Count > 0)
                                        {
                                            foreach (var clientBrand in Model.ClientBrands)
                                            {
                                                Html.RenderPartial("_BrandList", clientBrand);
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Letters Tab-->
                        <div id="letters-tab" class="tab-pane fade">
                            <div id="letters" class="panel-body ">
                                <button type="button" data-toggle="modal" data-target="#addLetterModal" class="btn btn-primary">Add Custom Letter</button>
                                <div class="row form-group">
                                    <div class="col-sm-12">
                                        <span id="letters-message" class="status-message-sm"></span>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-7">
                                        <div class="row form-group form-group-sm">
                                            <div class="col-sm-1">
                                                @Html.Label("Actions")
                                            </div>
                                            <div class="col-sm-3">
                                                @Html.Label("FileName")
                                            </div>
                                            <div class="col-sm-4">
                                                @Html.Label("Letter Description")
                                            </div>
                                            <div class="col-sm-1">
                                                @Html.Label("Enabled")
                                            </div>
                                            <div class="col-sm-3">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="client-letter-container">
                                    @if (Model.ClientLetters?.Count > 0)
                                    {
                                        foreach (ClientLetterViewModel clientLetter in Model.ClientLetters)
                                        {
                                            @Html.Partial("_ClientLetter", clientLetter)
                                        }
                                    }
                                    else
                                    {
                                        <span id="no-client-letters" class="text-gray">No custom client letters have been uploaded.</span>
                                    }
                                </div>
                            </div>
                        </div>
                        <!-- Upload Letter Modal -->
                        <div id="addLetterModal" class="modal fade" role="dialog">
                            <div class="modal-dialog">
                                <!-- Modal content-->
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                                        <h4 class="modal-title">Add Letter</h4>
                                    </div>
                                    <div class="modal-body">
                                        <div class="row form-group form-group-sm">
                                            <div class="col-sm-12">
                                                @Html.Label("Add Custom Letter for use during claims processing", new { @class = "text-gray" })
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-sm-12">
                                                <span id="upload-letter-error" class="error-sm"></span>
                                            </div>
                                        </div>
                                        <div class="row form-group form-group-sm">
                                            <div class="col-sm-12">
                                                @Html.Label("Letter Description")
                                                @Html.TextBox("new-letter-description", "", new { @class = "form-control", maxlength = "150" })
                                            </div>
                                        </div>
                                        <div class="row form-group form-group-sm">
                                            <div class="col-sm-12">
                                                <input type="file" name="letter-upload" id="letter-upload" /><br />
                                            </div>
                                        </div>
                                        <div class="row form-group form-group-sm">
                                            <div class="col-sm-12">
                                                @Html.Label("File Name")
                                                @Html.TextBox("new-letter-name", "", new { disabled = "disabled", @class = "form-control disabled" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="modal-footer">
                                        <input type="button" class="AddLetter btn btn-success" name="AddLetter" id="AddLetter" value="Add Letter" />
                                        <button type="button" class="CancelNewLetter btn btn-default" data-dismiss="modal">Cancel</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Invoicing tab-->
                        <div id="invoicing-tab" class="tab-pane fade">
                            <div id="invoicing" class="panel-body ">
                                <div class="row">
                                    <div class="col-sm-2">
                                        @Html.Label("Billing Type")
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.Label("Billing Value")
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.Label("Setup Fee")
                                    </div>
                                    <div class="col-sm-6">
                                        @Html.Label("Accounting E-mail Addresses")
                                    </div>
                                </div>
                                <div class="row form-group">
                                    <div class="col-sm-2">
                                        @Html.DropDownListFor(model => model.BillingType, Model.BillingTypes, new { @class = "form-control selectpicker" })<br />
                                        <span class="field-help">Choose how customer will be billed</span><br />
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.EditorFor(model => model.BillingValue, new { htmlAttributes = new { id = "BillingValue", @class = "form-control", @type = "text" } })
                                        <span id="billingValueHelp" class="field-help">The percentage of the recovery amount the customer will be charged</span><br />
                                        @Html.ValidationMessageFor(model => model.BillingValue, "", new { @class = "error" })
                                        <div id="ValidationBillingValue" class="error validationError" hidden>This field is required</div>
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.EditorFor(model => model.SetupFee, new { htmlAttributes = new { id = "SetupFee", @class = "form-control", @type = "text" } })
                                        <span class="field-help">Setup Fee charged per claim with recovery</span><br />
                                        @Html.ValidationMessageFor(model => model.SetupFee, "", new { @class = "error" })
                                        <div id="ValidationSetupFee" class="error validationError" hidden>This field is required</div>
                                    </div>
                                    <div class="col-sm-6">
                                        @Html.EditorFor(model => model.BillingEmailAddresses, new { htmlAttributes = new { id = "BillingEmailAddresses", @class = "form-control wide-input", @type = "text" } })
                                        <span class="field-help">Comma separated list of Accounting e-mail addresses (the monthly invoice report will be sent to these e-mail recipients)</span><br />
                                        @Html.ValidationMessageFor(model => model.BillingEmailAddresses, "", new { @class = "error" })
                                        <div id="ValidationBillingEmailAddresses" class="error validationError" hidden>This field is required</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Preprocessing tab-->
                        <div id="preprocessing-tab" class="tab-pane fade">
                            <div id="preprocessing-filters" class="panel-body ">
                                <div class="row form-group">
                                    <div class="col-sm-12">
                                        <fieldset class="fs-group">
                                            <legend class="fs-group">Preprocessing Filters</legend>
                                            <div class="row">
                                                <div class="col-sm-3">
                                                    @Html.Label("Oldest Car Year")
                                                </div>
                                                <div class="col-sm-3">
                                                    @Html.Label("Minimum Police Report FMV")
                                                </div>
                                                <div class="col-sm-2">
                                                    @Html.Label("States To Ignore")
                                                </div>
                                                <div class="col-sm-4">
                                                    @Html.Label("Activity Keywords/phrases to ignore")
                                                </div>
                                            </div>
                                            <div class="row form-group form-group-sm">
                                                <div class="col-sm-3">
                                                    @Html.EditorFor(model => model.OldestCarYear, new { htmlAttributes = new { id = "OldestCarYear", @class = "form-control", @type = "text" } })
                                                    <span class="field-help">Any cars older than the year specified will be excluded from Pre-processing</span><br />
                                                    @Html.ValidationMessageFor(model => model.OldestCarYear, "", new { @class = "error" })
                                                    <div id="ValidationOldestCarYear" class="error validationError" hidden>This field is required</div>
                                                </div>
                                                <div class="col-sm-3">
                                                    @Html.EditorFor(model => model.MinimumFMV, new { htmlAttributes = new { id = "MinimumFMV", @class = "form-control", @type = "text" } })
                                                    <span class="field-help">Any vehicle with an FMV less than the amount specified will be excluded from pre-processing</span><br />
                                                    @Html.ValidationMessageFor(model => model.MinimumFMV, "", new { @class = "error" })
                                                    <div id="ValidationMinimumFMV" class="error validationError" hidden>This field is required</div>
                                                </div>
                                                <div class="col-sm-2">
                                                    @Html.EditorFor(model => model.StatesToIgnore, new { htmlAttributes = new { @class = "form-control", @type = "text" } })
                                                    <span class="field-help">Comma separated list of states to ignore during pre-processing</span><br />
                                                    @Html.ValidationMessageFor(model => model.StatesToIgnore, "", new { @class = "error" })
                                                </div>
                                                <div class="col-sm-4">
                                                    @Html.EditorFor(model => model.ActivityKeywordsToIgnore, new { htmlAttributes = new { @class = "form-control multi-line-editor", @type = "text" } })
                                                    <span class="field-help">List of ActivityTx keywords/phrases to exclude from preprocessing</span><br />
                                                    @Html.ValidationMessageFor(model => model.ActivityKeywordsToIgnore, "", new { @class = "error" })
                                                </div>
                                            </div>
                                        </fieldset>

                                    </div>
                                </div>
                                <div class="row form-group form-group-sm">
                                    <div class="col-sm-5">
                                        @Html.Label("Import File Field Delimiter")<br/>
                                        @Html.EditorFor(model => model.FileDelimiter, new { htmlAttributes = new { id = "FileDelimiter", @class = "form-control", @type = "text" } })
                                        @*@Html.TextBoxFor(model => model.FileDelimiter,new { @class = "form-control" })*@
                                        <span class="field-help">This is the delimiter used in the client's VIN import file that separates the field values within each row.</span><br />
                                        @Html.ValidationMessageFor(model => model.FileDelimiter, "", new { @class = "error" })
                                        <div id="ValidationFileDelimiter" class="error validationError" hidden>This field is required</div>
                                    </div>
                                </div>

                            </div>
                        </div>
                        <!-- Turnaround Time -->
                        <div id="turnAroundTime-tab" class="tab-pane fade">
                            <div id="turnAroundTime" class="panel-body ">
                                <div class="row">
                                    <div class="col-sm-2">
                                        @Html.Label("Waiting for Call")
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.Label("Waiting for Document")
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.Label("Sent Letter")
                                    </div>
                                </div>
                                <div class="row form-group">
                                    <div class="col-sm-2">
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.ClaimFollowUpWaitingForCall, new {htmlAttributes = new {id = "ClaimFollowUpWaitingForCall", @class = "form-control", type = "number", min = 0, aria_describedBy = "claimFollowUpWaitingForCallAddon"}})
                                            <span class="input-group-addon" id="claimFollowUpWaitingForCallAddon">days</span>
                                        </div>
                                           
                                        <div id="ValidationClaimFollowUpWaitingForCall" class="error validationError" hidden>This field is required</div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.ClaimFollowUpWaitingForDocument, new { htmlAttributes = new { id = "ClaimFollowUpWaitingForDocument", @class = "form-control", type = "number", min = 0, aria_describedBy = "claimFollowUpWaitingForDocumentAddon" } })
                                            <span class="input-group-addon" id="claimFollowUpWaitingForDocumentAddon">days</span>
                                        </div>
                                        <div id="ValidationClaimFollowUpWaitingForDocument" class="error validationError" hidden>This field is required</div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="input-group">
                                            @Html.EditorFor(model => model.ClaimFollowUpSentLetter, new {htmlAttributes = new {id = "ClaimFollowUpSentLetter", @class = "form-control", type = "number", min = 0, aria_describedBy = "claimFollowUpSentLetterAddon"}})
                                            <span class="input-group-addon" id="claimFollowUpSentLetterAddon">days</span>
                                        </div>
                                        <div id="ValidationClaimFollowUpSentLetter" class="error validationError" hidden>This field is required</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Misc Tab-->
                        <div id="misc-tab" class="tab-pane fade">
                            <div id="misc" class="panel-body ">
                                <div class="row">
                                    <div class="col-sm-2">
                                        @Html.Label("Escalation Thresholds")<br/>
                                        @Html.EditorFor(model => model.EscalationThresholds, new { htmlAttributes = new { id = "EscalationThresholds", @class = "form-control", @type = "text" } })
                                        <span class="field-help">Comma separated list of threshhold values (i.e., '30,60,90')</span><br />
                                        <div id="ValidationEscalationThresholds" class="error validationError" hidden>This field is required</div>
                                        @Html.ValidationMessageFor(model => model.EscalationThresholds, "", new { @class = "error" })
                                    </div>
                                    <div class="col-sm-8">
                                        @Html.Label("Client Document Upload File Path")<br />
                                        @Html.EditorFor(model => model.ClientDocumentFilePath, new { htmlAttributes = new { id = "ClientDocumentFilePath", @class = "form-control", @type = "text" } })
                                        <span class="field-help">network location of uploaded client documents</span><br />
                                        <div id="ValidationClientDocumentFilePath" class="error validationError" hidden>This field is required</div>
                                        @Html.ValidationMessageFor(model => model.ClientDocumentFilePath, "", new { @class = "error" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                <button id="UpdateClient" type="submit" name="submitBtn" class="btn btn-success" value="Save">Save</button>
                <button type="submit" name="submitBtn" class="btn btn-success" value="Cancel">Cancel</button>
            </div>
        }
    }
</div>
